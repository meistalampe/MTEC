function EmpaticaMatlabBLEClient()
	close all;
    
    % Global variable
    global tcpClient;      % Share the global TCP port obj
    global fileID;
    global tcpPython;
    
    % Public variables
    TCPconnected = false;
    ListItemSelected = false;
    DeviceConnected = false;
    LogItemSelected = false;
    
    tcpPython = tcpip('localhost', 8632);

    % Open the GUI
    MainGUIHdl = figure('Visible','Off',...
                      'MenuBar','None',...
                      'Name','ICAT Empatica Client',...
                      'Units','Normalized',...
                      'Position',[0.4 0.2 0.2 0.6],...
                      'Color',[1 1 1],...
                      'NumberTitle','off');
                  
    ServerPanelHdl = uipanel('Parent',MainGUIHdl,...
                        'Title','Launch Empatica BLE Server',...
                        'TitlePosition','Centertop',...
                        'FontSize',9,...
                        'Units','Normalized',...
                        'Position',[0.1 0.7 0.8 0.12],...
                        'BackgroundColor',[1 1 1]);  
                    
    LaunchButtonHdl = uicontrol('Parent',MainGUIHdl,...
                            'Style','Pushbutton',...
                            'String','Launch',...
                            'FontSize',9,...
                            'Units','Normalized',...
                            'Position',[0.35 0.72 0.3 0.05],...
                            'Callback',@LaunchCallback);
                        
    IPPanelHdl = uipanel('Parent',MainGUIHdl,...
                        'Title','Server Connection',...
                        'TitlePosition','Centertop',...
                        'FontSize',9,...
                        'Units','Normalized',...
                        'Position',[0.1 0.57 0.8 0.12],...
                        'BackgroundColor',[1 1 1]);
                    
    IPportboxHdl = uicontrol('Parent',MainGUIHdl,...
                            'Style','Edit',...
                            'String','127.0.0.1:28000',...
                            'FontSize',9,...                                
                            'Units','Normalized',...
                            'Position',[0.13 0.59 0.5 0.05],...
                            'ForeGroundColor',[0.6 0.7 0.6]);
                        
    IPConnectBtnHdl = uicontrol('Parent',MainGUIHdl,...
                            'Style','Pushbutton',...
                            'String','Connect',...
                            'Units','Normalized',...
                            'FontSize',9,...
                            'Position',[0.65 0.59 0.22 0.05],...
                            'Callback',@ConnectCallback);
                        
    DevPanelHdl = uipanel('Parent',MainGUIHdl,...
                        'Title','Device Connection',...
                        'TitlePosition','Centertop',...
                        'FontSize',9,...
                        'Units','Normalized',...
                        'Position',[0.1 0.38 0.8 0.18],...
                        'BackgroundColor',[1 1 1]);
                    
    DevListTxtHdl = uicontrol('Parent',MainGUIHdl,...
                            'Style','Text',...
                            'String','Device List',...                              
                            'Units','Normalized',...
                            'FontSize',9,...
                            'Position',[0.13 0.46 0.5 0.03],...
                            'ForeGroundColor',[0.5 0.5 0.5],...
                            'BackgroundColor',[1 1 1]);
                        
    DevListBoxHdl = uicontrol('Parent',MainGUIHdl,...
                            'Style','Popup',...
                            'String',{''},...                              
                            'Units','Normalized',...
                            'Position',[0.13 0.4 0.5 0.05],...
                            'ForeGroundColor',[0.3 0.4 0.3],...
                            'BackgroundColor',[.95 .95 .95]);

	DevListBtnHdl = uicontrol('Parent',MainGUIHdl,...
                            'Style','Pushbutton',...
                            'String','List',...
                            'Units','Normalized',...
                            'FontSize',9,...
                            'Position',[0.65 0.46 0.22 0.05],...
                            'Callback',@DevListBtnCallback);
                        
    DevConnectHdl = uicontrol('Parent',MainGUIHdl,...
                            'Style','Pushbutton',...
                            'String','Connect',...
                            'Units','Normalized',...
                            'FontSize',9,...
                            'Position',[0.65 0.4 0.22 0.05],...
                            'Callback',@DevConnectBtnCallback);                        
                        
    DataPanelHdl = uipanel('Parent',MainGUIHdl,...
                        'Visible','On',...
                        'Title','Select data stream to log',...
                        'TitlePosition','Centertop',...
                        'FontSize',9,...
                        'Units','Normalized',...
                        'Position',[0.1 0.18 0.8 0.18],...
                        'BackgroundColor',[1 1 1]);
                    
    AccButtonHdl = uicontrol('Parent',DataPanelHdl,...
                            'Style','Checkbox',...
                            'Value',0,...
                            'String','ACC',...
                            'Units','Normalized',...
                            'Position',[0.02 0.6 0.2 0.2],...
                            'BackgroundColor',[1 1 1]);
                        
    GsrButtonHdl = uicontrol('Parent',DataPanelHdl,...
                            'Style','Checkbox',...
                            'Value',0,...
                            'String','GSR',...
                            'Units','Normalized',...
                            'Position',[0.22 0.6 0.2 0.2],...
                            'BackgroundColor',[1 1 1]);

    BvpButtonHdl = uicontrol('Parent',DataPanelHdl,...
                            'Style','Checkbox',...
                            'Value',0,...
                            'String','BVP',...
                            'Units','Normalized',...
                            'Position',[0.44 0.6 0.2 0.2],...
                            'BackgroundColor',[1 1 1]);
                        
    TmpButtonHdl = uicontrol('Parent',DataPanelHdl,...
                            'Style','Checkbox',...
                            'Value',0,...
                            'String','TMP',...
                            'Units','Normalized',...
                            'Position',[0.65 0.6 0.2 0.2],...
                            'BackgroundColor',[1 1 1]);
                        
    IbiButtonHdl = uicontrol('Parent',DataPanelHdl,...
                            'Style','Checkbox',...
                            'Value',0,...
                            'String','IBI',...
                            'Units','Normalized',...
                            'Position',[0.85 0.6 0.2 0.2],...
                            'BackgroundColor',[1 1 1]);
                        
    LogButtonHdl = uicontrol('Parent',DataPanelHdl,...
                            'Style','Pushbutton',...
                            'String','Start Logging',...
                            'Units','Normalized',...
                            'FontSize',9,...
                            'Position',[0.1 0.1 0.4 0.35],...
                            'Callback',@DataLogCallback);
                        
    PlotButtonHdl = uicontrol('Parent',DataPanelHdl,...
                            'Style','Pushbutton',...
                            'String','Plot',...
                            'Units','Normalized',...
                            'FontSize',9,...
                            'Position',[0.55 0.1 0.35 0.35],...
                            'Callback',@DataPlotCallback);
                        
    StatusPanelHdl = uipanel('Parent',MainGUIHdl,...
                        'Visible','On',...
                        'Title','Process Status',...
                        'TitlePosition','Centertop',...
                        'FontSize',9,...
                        'Units','Normalized',...
                        'Position',[0 0 1 0.15]);
                        
    StatusBoxHdl = uicontrol('Parent',MainGUIHdl,...
                        'Style','Text',...
                        'String','',...
                        'HorizontalAlignment','Center',...
                        'Units','Normalized',...
                        'Position',[0.01 0.01 0.95 0.1],...
                        'ForeGroundColor',[0.3 0.4 0.3]);
                    

    % Make figure visible
    MainGUIHdl.Visible = 'On';
    

    %% Launch BLE Server Callback
    function LaunchCallback(source,callbackdata)
        % Debug print
        % disp('In ConnectCallback');
        
        % Launch creating console window
        BLEServerProcess = System.Diagnostics.Process;
        BLEServerProcess.StartInfo.FileName = 'C:\Program Files (x86)\Empatica\EmpaticaBLEServer\EmpaticaBLEServer.exe';
        BLEServerProcess.EnableRaisingEvents = true;
        BLEServerProcess.StartInfo.CreateNoWindow = true;
        % dos('C:\Program Files (x86)\Empatica\EmpaticaBLEServer\EmpaticaBLEServer.exe &');
        
        try
            BLEServerProcess.Start();
            StatusBoxHdl.String = 'Launched Successfully';  % Update status box string
        catch
            StatusBoxHdl.String = 'Could not launch the application';   % Update status box string
        end
        
    end
    
    %% Connect to BLE server over TCP callback
    function ConnectCallback(source,callbackdata)
        % Debug print
        % disp('In ConnectCallback');
        
        % Parse Server address
        IPPort = strsplit(IPportboxHdl.String,':');
        IP = char(IPPort(1,1));
        Port = str2double(IPPort(1,2));

        % Connect to the TCP server
        tcpClient = tcpip(IP, Port, 'NetworkRole', 'client','InputBufferSize',1024);
        minutes = 1;
        tcpClient.TimerPeriod = minutes * 60;    
        % Open/Close the TCP connection
        if (strcmp(IPConnectBtnHdl.String,'Connect'))
            StatusBoxHdl.String = 'Establishing TCP connection ...'; pause(0.1);    % Update status box string
            try             
                fopen(tcpClient);
                StatusBoxHdl.String = 'TCP connection Successful';  % Update status box string
                IPConnectBtnHdl.String = 'Disconnect';  % Change <connect> button to <disconnect>
                
                TCPconnected = true;  % Update TCP connection flag
            catch err
                if (strcmp(err.identifier,'instrument:fopen:opfailed'))
                    StatusBoxHdl.String = 'Please make sure EmpaticaBLEServer is connected to your Empatica Device, and then Try Again!!';  % Update status box string
                else
                    StatusBoxHdl.String = 'Couldnt connect, Please try again';  % Update status box string
                end
            end    
            
        elseif (strcmp(IPConnectBtnHdl.String,'Disconnect'))
            fclose(tcpClient);            
            StatusBoxHdl.String = 'TCP connection closed';  % Update status box string
            IPConnectBtnHdl.String = 'Connect';     % Change <disconnect> button to <connect>   
            
            TCPconnected = false;  % Update TCP connection flag
        end            
    end

    %% Device List callback
    function DevListBtnCallback(source,callbackdata)        
        if isequal(TCPconnected,true)
            % Extract IP from global TCP obj
            tcpAddress = tcpClient.RemoteHost;
            
            % Issue device_list command
            fprintf(tcpClient,['device_list ' tcpAddress]);     % Send Command
            devResponse = fscanf(tcpClient);    % Receive response
            devResponseSplit = strsplit(devResponse);
            if (~isequal(char(devResponseSplit(1,3)),'0'))
                devID = devResponseSplit(1,5);
                DevListBoxHdl.String(end+1) = devID;    % Update the device list and statusbox
            end
            
            StatusBoxHdl.String = 'Device List Updated';  % Update status box string
        else
            StatusBoxHdl.String = 'Please Connect to TCP Server first';  % Update status box string
        end
    end

    %% Device Connect Callback
    function DevConnectBtnCallback(source,callbackdata)
        if (DevListBoxHdl.Value > 1)
            ListItemSelected = true;    % Update list receipt flag
            devIDsel = DevListBoxHdl.String(DevListBoxHdl.Value);   % Get the device ID selection
            
            % Issue device_connect or device_disconnect command
            if strcmp(DevConnectHdl.String,'Connect')
                fprintf(tcpClient,['device_connect ' char(devIDsel)]);     % Send Command
                devResponse = fscanf(tcpClient);    % Receive response
                if (strcmp(cellstr(devResponse),'R device_connect OK'))
                    StatusBoxHdl.String = ['Connected to Device ' devIDsel];  % Update status box string
                    DeviceConnected = true; % Update device connected flag
                    
                    DevConnectHdl.String = 'Disconnect';    % Change button text
                else
                    StatusBoxHdl.String = ['Could not connect to device ' devIDsel];  % Update status box string
                end
            elseif strcmp(DevConnectHdl.String,'Disconnect')
                flushinput(tcpClient);
                fprintf(tcpClient,['device_disconnect ' char(devIDsel)]);     % Send Command
                devResponse = fscanf(tcpClient);    % Receive response
                if (strcmp(cellstr(devResponse),'R device_disconnect OK'))
                    StatusBoxHdl.String = ['Disconnected from Device ' devIDsel];  % Update status box string
                    DeviceConnected = false; % Update device connected flag
                    
                    DevConnectHdl.String = 'Connect';    % Change button text
                else
                    StatusBoxHdl.String = ['Could not disconnect from device ' devIDsel tcpClient.BytesAvailable];  % Update status box string
                end
            end
        else
            ListItemSelected = false;    % Update list receipt flag
            StatusBoxHdl.String = 'Please select a device from the dropdown list first';
        end
    end

    %% Data logging callback
    function DataLogCallback(source,callbackdata)
        
       if (isequal(DeviceConnected,true) && isequal(TCPconnected,true))
            if strcmp(LogButtonHdl.String,'Start Logging')
                if AccButtonHdl.Value; fprintf(tcpClient,'device_subscribe acc ON'); fscanf(tcpClient); end
                if GsrButtonHdl.Value; fprintf(tcpClient,'device_subscribe gsr ON'); fscanf(tcpClient); end
                if BvpButtonHdl.Value; fprintf(tcpClient,'device_subscribe bvp ON'); fscanf(tcpClient); end
                if TmpButtonHdl.Value; fprintf(tcpClient,'device_subscribe tmp ON'); fscanf(tcpClient); end
                if IbiButtonHdl.Value; fprintf(tcpClient,'device_subscribe ibi ON'); fscanf(tcpClient); end
                
                % Change button text
                LogButtonHdl.String = 'Stop';
                
                % Create dir and write to file
                repositoryName = 'DataRepository';
                if ~exist(repositoryName,'dir');
                    mkdir('DataRepository');
                end
                a=datestr(now,'yyyy-mm-dd-HH-MM-SS'); 
                
                filename = strcat('.\DataRepository\recording_', a);
                fileID = fopen(filename,'a+');
                
                StatusBoxHdl.String = strcat('Data logging started to ', filename); 
                
                % Change to callback mode for capturing datastream
                tcpClient.BytesAvailableFcn = @BytesReceivedCallback;
                
                % Change to callback mode for new data file 
                tcpClient.TimerFcn = @TimerReachedCallback;
                
            elseif strcmp(LogButtonHdl.String,'Stop')
                tcpClient.BytesAvailableFcn = '';
                tcpClient.TimerFcn = '';
                
%                 % deactivate python server
%                 try 
%                     statusIndex = 'inactive';
%                     commandClient(tcpPython, statusIndex)
%                 catch err
%                     if (strcmp(err.identifier,'instrument:fopen:opfailed'))
%                         disp('Couldnt connect to Python Server.');
%                     else
%                         disp('Couldnt connect, Please try again.'); 
%                     end
%                 end  
            
%                 pause(1);
                
                fclose(fileID);
                StatusBoxHdl.String = 'Data logging stopped'; 
                
                % Change button text
                LogButtonHdl.String = 'Start Logging';
            end
        else
            StatusBoxHdl.String = 'Please check either TCP or Device connection'; 
        end
    end

    % BytesAvailable callback function
    function BytesReceivedCallback(source,callbackdata)
        FListOpen = fopen('all'); %get the names of the open files
        if ismember(fileID,FListOpen) %see if myfile is open
            fwrite(fileID, fscanf(tcpClient));
        end      
    end
    % Timer reached callback function
    function TimerReachedCallback(source,callbackdata)       
        disp('Timer Event');
        
        FListOpen = fopen('all'); %get the names of the open files
        if ismember(fileID,FListOpen) %see if myfile is open
            fclose(fileID);
             
% %             try 
% %                 statusIndex = 'active';
% %                 commandClient(tcpPython, statusIndex)
% %             catch err
% %                 if (strcmp(err.identifier,'instrument:fopen:opfailed'))
% %                     disp('Couldnt connect to Python Server.');
% %                 else
% %                     disp('Couldnt connect, Please try again.'); 
% %                 end
% %             end  
%             
            pause(1);
        end
        
        if ~exist('DataRepository','dir');
            mkdir('DataRepository');
        end
        a=datestr(now,'yyyy-mm-dd-HH-MM-SS'); 
                
        filename = strcat('.\DataRepository\recording_', a);
        fileID = fopen(filename,'a+');
    end
end